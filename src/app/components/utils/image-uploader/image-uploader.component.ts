import { Component, OnInit, Input, Output, EventEmitter } from "@angular/core";
import { AngularFireStorage } from "@angular/fire/storage";
import { Observable } from "rxjs";
import { finalize } from "rxjs/operators";

@Component({
  selector: "app-image-uploader",
  templateUrl: "./image-uploader.component.html",
  styleUrls: ["./image-uploader.component.css"]
})
export class ImageUploaderComponent implements OnInit {
  /**
   * @technologic808
   * ONLY FOR THE TWO WAY BINDING
   * I am not responsible for the rest of the Unreadable code!
   * And i've spent quite a lot of time understanding what the "it" in the function ClickIt() referred to
   * I've also commented out large swaths of unexplained unnecessary code
   *
   * Anyway............
   *
   * This component will be a child component for many parent forms
   *
   * The image URL is generated by Firebase once the image is uploaded to the cloud.
   *
   * We need a way to transmit this URL to the parent form so that
   * the URL can be sent to the Controller to be save in the Database
   *
   * One way we can achieve this is by using two way form binding in Angular
   * using @Input , @Output , EventEmitter , and [(ngModel)]
   *
   *
   */

  /**
   * We Have the @Input property
   * which is used to show the data in the input component
   * and to also detect for change so that an event can be emitted to the parent
   * which  is done by the @Output property
   *
   */
  @Input() imgUrlData: string;

  @Output() imgUrlDataChange = new EventEmitter<string>();

  onModelChange(value: string) {
    console.log("Ok event emitted is this " + value);
    this.imgUrlDataChange.emit(value);
  }

  uploadPercent: Observable<number>;

  // You receive a url when the image has uploaded
  // append it with _500x500 or _1000x1000 for respective sizes
  downloadURL: Observable<string>;

  selectedFile = null;
  isSelectedFile = false;
  placeholderImg = "../../../../assets/upload.svg";

  // Flags used to change HTML behaviour
  isUploading = false;
  gotUrl = false;

  // Uses angular fire storage
  constructor(private storage: AngularFireStorage) {}

  ngOnInit() {}

  onFileSelected(event) {
    console.log("**** Triggered");
    console.log(event);
    this.selectedFile = event.target.files[0];
    this.isSelectedFile = true;
    // this.afStorage.upload('/upload/to/this-path', event.target.files[0]);
  }

  clickIt() {
    document.getElementById("fileInput").click();
    this.isSelectedFile = true;
  }

  /**
   * @technologic808
   * Creates a random string of size @length
   * @param length : Number of characters in String
   */
  createRandomFileName(length) {
    var result = "";
    var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
      result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
  }

  uploadFile() {
    this.isUploading = true;

    // Please name the file uniquely, based on userID, Context, etc - Upload with an existing filename will be overritten
    const filePath = this.createRandomFileName(10);
    const fileRef = this.storage.ref(filePath);
    const task = this.storage.upload(filePath, this.selectedFile);

    // observe percentage changes
    this.uploadPercent = task.percentageChanges();
    // get notified when the download URL is available
    task
      .snapshotChanges()
      .pipe(
        finalize(() => {
          this.downloadURL = fileRef.getDownloadURL();
          this.gotUrl = true;
          this.isUploading = false;
          this.isSelectedFile = false;
          console.log(this.downloadURL);
          this.downloadURL.subscribe(
            imgUrlData => (this.imgUrlData = imgUrlData)
          );
          console.log(this.imgUrlData);
        })
      )
      .subscribe();
  }
}
